using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace WindowsFormsApp4
{
    /// <summary>
    /// アプリケーションで使用する日付選択コントロールです。
    /// </summary>
    public partial class FwDateTime : UserControl
    {
        private DateTime? _value;

        /// <summary>
        /// 書式タイプ
        /// </summary>
        private enum FormatType
        {
            None,   // なし
            Year,   // 年
            Month,  // 月
            Day,    // 日
            Hour,   // 時
            Minute, // 分
            Second  // 秒
        }

        /// <summary>
        /// フィールド情報（セパレータ部or数値入力部）
        /// </summary>
        private class FieldInfo
        {
            /// <summary>
            /// フィールドの開始位置
            /// </summary>
            public int index;
            /// <summary>
            /// フィールドの文字数
            /// </summary>
            public int length;
            /// <summary>
            /// フィールドの書式タイプ
            /// </summary>
            public FormatType type;

            /// <summary>
            /// コンストラクタ
            /// </summary>
            /// <param name="index"></param>
            /// <param name="length"></param>
            /// <param name="type"></param>
            public FieldInfo(int index, int length, FormatType type)
            {
                this.index = index;
                this.length = length;
                this.type = type;
            }

            /// <summary>
            /// セパレータ部かどうか
            /// </summary>
            /// <returns></returns>
            public bool isSeparator()
            {
                return this.type.Equals(FormatType.None);
            }

            ///// <summary>
            ///// 入力値が有効な値か判定する
            ///// </summary>
            ///// <param name="val"></param>
            ///// <param name="pos"></param>
            ///// <returns></returns>
            //public bool IsValidValue(string val, int pos)
            //{
            //    int intval;

            //    if (!val.Contains("_") && this.index < pos)
            //    {
            //        if (int.TryParse(val, out intval))
            //        {
            //            switch (this.type)
            //            {
            //                case FormatType.Year:       // 年
            //                    break;
            //                case FormatType.Month:      // 月（０１〜１２）
            //                    return (intval == Math.Min(Math.Max(intval, 1), 12));
            //                case FormatType.Day:        // 日（０１〜３１）
            //                    return (intval == Math.Min(Math.Max(intval, 1), 31));
            //                case FormatType.Hour:       // 時（０１〜２３）
            //                    return (intval == Math.Min(Math.Max(intval, 0), 23));
            //                case FormatType.Minute:     // 分（００〜５９）
            //                    return (intval == Math.Min(Math.Max(intval, 0), 59));
            //                case FormatType.Second:     // 秒（００〜５９）
            //                    return (intval == Math.Min(Math.Max(intval, 0), 59));
            //            }
            //        }
            //    }
            //    return true;
            //}

            /// <summary>
            /// 入力値より有効な値を返却する
            /// </summary>
            /// <param name="val"></param>
            /// <param name="minYear"></param>
            /// <param name="maxYear"></param>
            /// <returns></returns>
            public string GetValidValue(string val, int minYear = 1, int maxYear = 9999)
            {
                int intval;

                if (!val.Contains("_"))
                {
                    if (int.TryParse(val, out intval))
                    {
                        switch (this.type)
                        {
                            case FormatType.Year:       // 年
                                intval = Math.Min(Math.Max(intval, minYear), maxYear);
                                break;
                            case FormatType.Month:      // 月（０１〜１２）
                                intval = Math.Min(Math.Max(intval, 1), 12);
                                break;
                            case FormatType.Day:        // 日（０１〜３１）
                                intval = Math.Min(Math.Max(intval, 1), 31);
                                break;
                            case FormatType.Hour:       // 時（０１〜２３）
                                intval = Math.Min(Math.Max(intval, 0), 23);
                                break;
                            case FormatType.Minute:     // 分（００〜５９）
                                intval = Math.Min(Math.Max(intval, 0), 59);
                                break;
                            case FormatType.Second:     // 秒（００〜５９）
                                intval = Math.Min(Math.Max(intval, 0), 59);
                                break;
                        }

                        int len = (this.type.Equals(FormatType.Year)) ? 4 : 2;
                        string fmt = "{0:D" + len + "}";
                        return string.Format(fmt, intval);
                    }
                }

                return val;
            }

            //public string GetValidValue(string val, ref int pos, int cnt, int minYear = 1, int maxYear = 9999)
            //{
            //    int intval;
            //    int editpos = pos - cnt;

            //    if (this.index == editpos)
            //    {
            //        // １文字目入力時、入力値が入力不可の場合は、０を加えて２文字目とする（例：３→０３）
            //        if (int.TryParse(val.Substring(0, 1), out intval))
            //        {
            //            int max = -1;
            //            switch (this.type)
            //            {
            //                case FormatType.Month:      // 月（０１〜１２）
            //                    max = 1;
            //                    break;
            //                case FormatType.Day:        // 日（０１〜３１）
            //                    max = 3;
            //                    break;
            //                case FormatType.Hour:       // 時（０１〜２３）
            //                    max = 2;
            //                    break;
            //                case FormatType.Minute:     // 分（００〜５９）
            //                    max = 5;
            //                    break;
            //                case FormatType.Second:     // 秒（００〜５９）
            //                    max = 5;
            //                    break;
            //            }

            //            if (max != -1)
            //            {
            //                if (intval > max)
            //                {
            //                    pos++;
            //                    return string.Format("{0:D2}", intval);
            //                }
            //                else
            //                {
            //                    // １文字目入力OKでも、２文字目が上下限を超えている場合は２文字目を０にする
            //                    if (!val.Contains("_"))
            //                    {
            //                        if (!val.Equals(this.GetValidValue(val, minYear, maxYear)))
            //                        {
            //                            val = val.Remove(1, 1).Insert(1, "0");
            //                        }
            //                    }
            //                }
            //            }
            //        }
            //    }
            //    else if (this.index < editpos)
            //    {
            //        // ２文字目以降の入力時、未入力部分を０で埋める
            //        for (int i = 0; i < (editpos - this.index); i++)
            //        {
            //            if (val[i] == '_')
            //            {
            //                val = val.Remove(i, 1).Insert(i, "0");
            //            }
            //        }
            //    }

            //    return this.GetValidValue(val, minYear, maxYear);
            //}
        }

        /// <summary>
        /// フィールド情報リスト
        /// </summary>
        private List<FieldInfo> fieldInfoList = new List<FieldInfo>();

        /// <summary>
        /// カスタム書式指定文字列
        /// </summary>
        [Category("値"), Description("日付/時刻のカスタム書式指定文字列をを取得または設定します。（使用可能な書式：yyyy,MM,dd,HH,,mm,ss）")]
        public string CustomFormat
        {
            get
            {
                return this.dateTimePicker1.CustomFormat;
            }
            set
            {
                this.dateTimePicker1.CustomFormat = value;

                // プレースホルダの設定
                this.placeholder = Regex.Replace(DateTime.Now.ToString(this.CustomFormat), "[0-9]", "_");

                // フィールド情報リストの作成
                this.fieldInfoList.Clear();
                Match m = Regex.Match(this.placeholder, "[_]+|[^_]+");
                while (m.Success)
                {
                    FormatType type = FormatType.None;
                    string format = (m.Value.StartsWith("_")) ? this.CustomFormat.Substring(m.Index, m.Length) : "";
                    if (!string.IsNullOrEmpty(format))
                    {
                        switch (format)
                        {
                            case "yyyy":
                                type = FormatType.Year;
                                break;
                            case "MM":
                                type = FormatType.Month;
                                break;
                            case "dd":
                                type = FormatType.Day;
                                break;
                            case "HH":
                                type = FormatType.Hour;
                                break;
                            case "mm":
                                type = FormatType.Minute;
                                break;
                            case "ss":
                                type = FormatType.Second;
                                break;
                            default:
                                throw new System.FormatException("Invalid format type.");
                        }
                    }

                    FieldInfo finfo = new FieldInfo(m.Index, m.Length, type);
                    this.fieldInfoList.Add(finfo);

                    m = m.NextMatch();
                }
            }
        }

        /// <summary>
        /// 日付の最大値
        /// </summary>
        [Category("値"), Description("入力可能な日付の最大値を取得または設定します。")]
        public DateTime MaxDate { get => this.dateTimePicker1.MaxDate; set => this.dateTimePicker1.MaxDate = value; }

        /// <summary>
        /// 
        /// </summary>
        [Category("値"), Description("入力可能な日付の最小値を取得または設定します。")]
        public DateTime MinDate { get => this.dateTimePicker1.MinDate; set => this.dateTimePicker1.MinDate = value; }

        /// <summary>
        /// 日付/時刻の値
        /// </summary>
        [Category("値"), Description("日付/時刻の値を取得または設定します。")]
        public DateTime? Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;

                // テキスト変更の場合は、DateTimePickerのValueを更新する
                if (this._value.HasValue && !this._value.Equals(this.dateTimePicker1.Value))
                {
                    this.dateTimePicker1.Value = (DateTime)value;
                }

                // テキストのフォーマット
                this.FormatText();
            }
        }

        /// <summary>
        /// 日付文字列
        /// </summary>
        [Browsable(false)]
        public override string Text
        {
            get => (this.fwTextBox1.Text.Equals(this.placeholder)) ? "" : this.fwTextBox1.Text;
            set => this.fwTextBox1.Text = (string.IsNullOrEmpty(value)) ? this.placeholder : value;
        }

        /// <summary>
        /// 背景色
        /// </summary>
        public override Color BackColor { get => this.fwTextBox1.BackColor; set => this.fwTextBox1.BackColor = value; }

        /// <summary>
        /// プレースホルダ
        /// </summary>
        private string placeholder;

        /// <summary>
        /// エラープロバイダー
        /// </summary>
        private ErrorProvider errorprovider = new ErrorProvider();

        /// <summary>
        /// コンストラクタ
        /// </summary>
        public FwDateTime()
        {
            InitializeComponent();
        }

        private void AdjustValue(ref string text, ref int pos, FieldInfo finfo)
        {
            string val = text.Substring(finfo.index, finfo.length);
            int editpos = pos - 1;
            int? year, month, day;

            if (finfo.index == editpos)
            {
                int intval;

                if (int.TryParse(val.Substring(0, 1), out intval))
                {
                    int max = -1;
                    switch (finfo.type)
                    {
                        case FormatType.Month:      // 月（０１〜１２）
                            max = 1;
                            break;
                        case FormatType.Day:        // 日（０１〜３１）
                            month = GetFieldValue(text, FormatType.Month);
                            max = (month == 2) ? 2 : 3;
                            break;
                        case FormatType.Hour:       // 時（０１〜２３）
                            max = 2;
                            break;
                        case FormatType.Minute:     // 分（００〜５９）
                            max = 5;
                            break;
                        case FormatType.Second:     // 秒（００〜５９）
                            max = 5;
                            break;
                    }

                    if (max != -1)
                    {
                        // １文字目入力時、入力値が入力不可の場合は、０を加えて２文字目とする（例：３→０３）
                        if (intval > max)
                        {
                            val = string.Format("{0:D2}", intval);
                            text = text.Substring(0, finfo.index) + val + text.Substring(finfo.index + finfo.length);
                            pos++;
                        }
                        else
                        {
                            // １文字目入力OKでも、２文字目が上下限を超えている場合は２文字目を０にする
                            if (!val.Contains("_"))
                            {
                                if (!this.IsValidValue(text, finfo.type))
                                {
                                    val = val.Remove(1, 1).Insert(1, "0");
                                    text = text.Substring(0, finfo.index) + val + text.Substring(finfo.index + finfo.length);
                                }
                            }
                        }
                    }
                }
            }
            else if (finfo.index < editpos)
            {
                // ２文字目以降の入力時、未入力部分を０で埋める
                for (int i = 0; i < (editpos - finfo.index); i++)
                {
                    if (val[i] == '_')
                    {
                        val = val.Remove(i, 1).Insert(i, "0");
                    }
                }
                text = text.Substring(0, finfo.index) + val + text.Substring(finfo.index + finfo.length);
            }

            switch (finfo.type)
            {
                case FormatType.Year:
                    year = GetFieldValue(text, FormatType.Year);
                    month = GetFieldValue(text, FormatType.Month);
                    day = GetFieldValue(text, FormatType.Day);
                    if (year.HasValue && month.HasValue && day.HasValue)
                    {
                        if (month == 2)
                        {
                            FieldInfo finfoDay = GetFieldInfo(FormatType.Day);
                            if (finfoDay != null)
                            {
                                if (DateTime.IsLeapYear(year.Value))
                                {
                                    if (day > 29)
                                    {
                                        text = text.Substring(0, finfoDay.index) + "29" + text.Substring(finfoDay.index + finfoDay.length);
                                        break;
                                    }
                                }
                                if (day > 28)
                                {
                                    text = text.Substring(0, finfoDay.index) + "28" + text.Substring(finfoDay.index + finfoDay.length);
                                }
                            }
                        }
                    }
                    break;
                case FormatType.Month:
                    month = GetFieldValue(text, FormatType.Month);
                    day = GetFieldValue(text, FormatType.Day);
                    if (month.HasValue && day.HasValue)
                    {
                        FieldInfo finfoDay = GetFieldInfo(FormatType.Day);
                        if (finfoDay != null)
                        {
                            switch (month)
                            {
                                case 2:
                                    year = GetFieldValue(text, FormatType.Year);
                                    if (year != null)
                                    {
                                        if (DateTime.IsLeapYear(year.Value))
                                        {
                                            if (day > 29)
                                            {
                                                text = text.Substring(0, finfoDay.index) + "29" + text.Substring(finfoDay.index + finfoDay.length);
                                                break;
                                            }
                                        }
                                    }
                                    if (day > 28)
                                    {
                                        text = text.Substring(0, finfoDay.index) + "28" + text.Substring(finfoDay.index + finfoDay.length);
                                    }
                                    break;
                                case 4:
                                case 6:
                                case 9:
                                case 11:
                                    if (day > 30)
                                    {
                                        text = text.Substring(0, finfoDay.index) + "30" + text.Substring(finfoDay.index + finfoDay.length);
                                    }
                                    break;
                                case 1:
                                case 3:
                                case 5:
                                case 7:
                                case 8:
                                case 10:
                                case 12:
                                    if (day > 31)
                                    {
                                        text = text.Substring(0, finfoDay.index) + "31" + text.Substring(finfoDay.index + finfoDay.length);
                                    }
                                    break;
                            }
                        }
                    }
                    break;
            }
        }

        /// <summary>
        /// テキストのフォーマット
        /// </summary>
        /// <param name="inputText"></param>
        private void FormatText(string inputText = null)
        {
            string text = "";
            int pos = this.fwTextBox1.SelectionStart;

            if (inputText != null)
            {
                // ------------------------
                // テキストボックス編集時
                // ------------------------

                if (!string.IsNullOrEmpty(this.fwTextBox1.PastedText))
                {
                    // ---------------
                    // 貼り付けの場合
                    // ---------------

                    // 入力前のテキスト
                    int start = pos - this.fwTextBox1.PastedText.Length;
                    text = inputText.Substring(0, start) + inputText.Substring(pos);

                    // 削除された文字は、プレースホルダで埋める
                    int cnt = text.Length - this.placeholder.Length;
                    if (cnt < 0)
                    {
                        text = text.Substring(0, start) + this.placeholder.Substring(start, -cnt) + text.Substring(start);
                    }

                    //// フィールドの途中から貼り付けた場合、前を"０"で埋める
                    //FieldInfo finfo = this.GetFieldInfo(start);
                    //if (finfo != null)
                    //{
                    //    for (int i = finfo.index; i < start; i++)
                    //    {
                    //        if (text[i] == '_')
                    //        {
                    //            text = text.Remove(i, 1).Insert(i, "0");
                    //        }
                    //    }
                    //}

                    for (int i = start; i < text.Length; i++)
                    {
                        if (this.fwTextBox1.PastedText.Length > 0)
                        {
                            // セパレータでなければ、貼り付け文字に置き換える
                            if (this.placeholder[i] == '_')
                            {
                                text = text.Remove(i, 1).Insert(i, this.fwTextBox1.PastedText[0].ToString());
                                this.fwTextBox1.PastedText = this.fwTextBox1.PastedText.Remove(0, 1);

                                //// フィールドの入力が完了した場合、妥当性チェックを行う
                                //finfo = this.GetFieldInfo(i);
                                //string val = text.Substring(finfo.index, finfo.length);
                                //if (!val.Contains("_"))
                                //{
                                //    string validval = finfo.GetValidValue(val, this.MinDate.Year, this.MaxDate.Year);
                                //    if (!val.Equals(validval))
                                //    {
                                //        // 妥当でなければ、有効な値に置き換える
                                //        text = text.Substring(0, finfo.index) + validval + text.Substring(finfo.index + finfo.length);
                                //    }
                                //}

                                int current = i + 1;
                                FieldInfo finfo = this.GetFieldInfo(i);
                                this.AdjustValue(ref text, ref current, finfo);
                                if(current != (i + 1))
                                {
                                    i = current - 1;
                                    pos++;
                                }
                            }
                            else
                            {
                                // セパレータの場合、キャレット位置を後ろにずらす
                                pos++;
                            }
                        }
                        else
                        {
                            // 貼り付け完了
                            break;
                        }
                    }

                    // 貼り付け文字が余った場合はクリアする
                    this.fwTextBox1.PastedText = "";
                }
                else
                {
                    // ---------------
                    // キー入力の場合
                    // ---------------

                    int cnt = inputText.Length - this.placeholder.Length;
                    if (cnt > 0)
                    {
                        // 上書きモードにするため、１文字削除（２文字以上同時に入力できないので cnt=1）
                        text = inputText.Remove(pos, cnt);

                        //FieldInfo finfo = this.GetFieldInfo(pos - cnt);
                        //if (finfo != null)
                        //{
                        //    // 入力値が上下限値を超えているか、補正可能な場合は有効な値に置き換える
                        //    string val = text.Substring(finfo.index, finfo.length);
                        //    string validval = finfo.GetValidValue(val, ref pos, cnt, this.MinDate.Year, this.MaxDate.Year);
                        //    if (!val.Equals(validval))
                        //    {
                        //        text = text.Substring(0, finfo.index) + validval + text.Substring(finfo.index + finfo.length);
                        //    }
                        //}
                    }
                    else if (cnt < 0)
                    {
                        // 削除された文字は、プレースホルダで埋める
                        text = inputText.Substring(0, pos) + this.placeholder.Substring(pos, -cnt) + inputText.Substring(pos);
                    }
                    else
                    {
                        text = inputText;
                    }

                    FieldInfo finfo = this.GetFieldInfo(pos - 1);
                    if (finfo != null)
                    {
                        this.AdjustValue(ref text, ref pos, finfo);
                    }
                }

                // 全桁入力完了時、日付/時刻の値を更新する
                if (!text.Contains("_"))
                {
                    try
                    {
                        DateTime dt = DateTime.ParseExact(text, this.CustomFormat, null);

                        if (dt < this.MinDate)
                        {
                            dt = this.MinDate;
                            text = this.MinDate.ToString(this.CustomFormat);
                        }
                        if (dt > this.MaxDate)
                        {
                            dt = this.MaxDate;
                            text = this.MaxDate.ToString(this.CustomFormat);
                        }
                        this._value = dt;

                        // DateTimePickerのValueのValueも更新
                        this.dateTimePicker1.Value = dt;
                    }
                    catch
                    {
                        this._value = null;
                    }
                }
                else
                {
                    // 入力途中、および入力クリアの場合は、日付/時刻の値をNULLクリアする
                    this._value = null;
                }
            }
            else
            {
                // ------------------------
                // Valueプロパティ設定時
                // ------------------------

                text = (this._value.HasValue) ? ((DateTime)this._value).ToString(this.CustomFormat) : this.placeholder;
            }

            // 日付文字列の設定
            this.Text = text;

            // キャレットの位置の設定
            this.fwTextBox1.Select(pos, 0);
        }

        /// <summary>
        /// フィールド情報取得
        /// </summary>
        /// <param name="pos"></param>
        /// <returns></returns>
        private FieldInfo GetFieldInfo(int pos)
        {
            foreach (FieldInfo finfo in this.fieldInfoList)
            {
                if (pos >= finfo.index && pos < finfo.index + finfo.length)
                {
                    return finfo;
                }
            }
            return null;
        }
        private FieldInfo GetFieldInfo(FormatType type)
        {
            foreach (FieldInfo finfo in this.fieldInfoList)
            {
                if (type == finfo.type)
                {
                    return finfo;
                }
            }
            return null;
        }

        /// <summary>
        /// 前のフィールド情報取得
        /// </summary>
        /// <param name="finfo"></param>
        /// <returns></returns>
        private FieldInfo GetPrevFieldInfo(FieldInfo finfo)
        {
            int index = this.fieldInfoList.IndexOf(finfo);
            if (index > 0)
            {
                return this.fieldInfoList[index - 1];
            }
            return null;
        }

        /// <summary>
        /// 次のフィールド情報取得
        /// </summary>
        /// <param name="finfo"></param>
        /// <returns></returns>
        private FieldInfo GetNextFieldInfo(FieldInfo finfo)
        {
            int index = this.fieldInfoList.IndexOf(finfo);
            if (index < this.fieldInfoList.Count - 1)
            {
                return this.fieldInfoList[index + 1];
            }
            return null;
        }

        private int? GetFieldValue(string input, FormatType type)
        {
            FieldInfo finfo = GetFieldInfo(type);
            if (finfo != null)
            {
                string val = input.Substring(finfo.index, finfo.length);

                int intval;
                if (int.TryParse(val, out intval))
                {
                    return intval;
                }
            }
            return null;
        }

        private bool IsValidValue(string input, FormatType type)
        {
            int? intval = GetFieldValue(input, type);

            if (intval.HasValue)
            {
                switch (type)
                {
                    case FormatType.Year:
                        return (intval >= 1 && intval <= 9999);
                    case FormatType.Month:
                        return (intval >= 1 && intval <= 12);
                    case FormatType.Day:
                        int? month = GetFieldValue(input, FormatType.Month);
                        if (month.HasValue)
                        {
                            switch (month)
                            {
                                case 2:
                                    int? year = GetFieldValue(input, FormatType.Year);
                                    if (year.HasValue)
                                    {
                                        if (DateTime.IsLeapYear(year.Value))
                                        {
                                            return (intval >= 1 && intval <= 29);
                                        }
                                    }
                                    return (intval >= 1 && intval <= 28);
                                case 4:
                                case 6:
                                case 9:
                                case 11:
                                    return (intval >= 1 && intval <= 30);
                                case 1:
                                case 3:
                                case 5:
                                case 7:
                                case 8:
                                case 10:
                                case 12:
                                    return (intval >= 1 && intval <= 31);
                            }
                        }
                        return (intval >= 1 && intval <= 31);
                    case FormatType.Hour:
                        return (intval >= 0 && intval <= 23);
                    case FormatType.Minute:
                        return (intval >= 0 && intval <= 59);
                    case FormatType.Second:
                        return (intval >= 0 && intval <= 59);
                }
            }
            return true;
        }

        /// <summary>
        /// キー押下（KeyPress）
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void fwTextBox1_KeyPress(object sender, KeyPressEventArgs e)
        {
            TextBox textbox = this.fwTextBox1;
            int pos = textbox.SelectionStart;

            if (e.KeyChar >= '0' && e.KeyChar <= '9')
            {
                // -------------------
                // 数値入力
                // -------------------

                if (pos < textbox.Text.Length)
                {
                    FieldInfo finfo = this.GetFieldInfo(pos);
                    if (finfo != null)
                    {
                        // セパレータの場合、文字挿入位置を次フィールドの先頭へ移動する
                        if (finfo.isSeparator())
                        {
                            FieldInfo next = this.GetNextFieldInfo(finfo);
                            if (next != null)
                            {
                                this.fwTextBox1.SelectionStart = next.index;
                            }
                            else
                            {
                                e.Handled = true;
                            }
                        }
                        else
                        {
                            // フィールド内での入力時は、入力値が妥当でなければ入力不可とする
                            string newval = textbox.Text.Substring(0, pos) + e.KeyChar.ToString() + textbox.Text.Substring(pos + 1);
                            //string val = newval.Substring(finfo.index, finfo.length);
                            //if (!finfo.IsValidValue(val, pos))
                            //{
                            //    e.Handled = true;
                            //}
                            if (finfo.index < pos)
                            {
                                if (!this.IsValidValue(newval, finfo.type))
                                {
                                    e.Handled = true;
                                }
                            }
                        }
                    }
                }
                else
                {
                    // 末尾での入力は無視する
                    e.Handled = true;
                }
            }
            else if (e.KeyChar == '\b')
            {
                // -------------------
                // バックスペース入力
                // -------------------

                if (pos > 0)
                {
                    if (textbox.SelectionLength == 0)
                    {
                        FieldInfo finfo = this.GetFieldInfo(pos - 1);
                        if (finfo != null)
                        {
                            // 文字挿入位置を調整（セパレータの場合、前フィールドの末尾へ）
                            if (finfo.isSeparator())
                            {
                                FieldInfo prev = this.GetPrevFieldInfo(finfo);
                                if (prev != null)
                                {
                                    textbox.SelectionStart = prev.index + prev.length;
                                }
                                else
                                {
                                    e.Handled = true;
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (textbox.SelectionLength == 0)
                    {
                        // 先頭での入力は無視する
                        e.Handled = true;

                    }
                }
            }
        }

        /// <summary>
        /// テキスト変更（TextChanged）
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void fwTextBox1_TextChanged(object sender, EventArgs e)
        {
            // テキストのフォーマット
            this.FormatText(this.Text);
        }

        /// <summary>
        /// カレンダーで日付選択（ValueChanged）
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dateTimePicker1_ValueChanged(object sender, EventArgs e)
        {
            // 日付/時刻の値を更新
            this._value = this.dateTimePicker1.Value;

            // テキストのフォーマット
            this.FormatText();
        }
    }
}
