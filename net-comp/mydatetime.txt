using System;
using System.ComponentModel;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace MySolutions.PrognerTemplate.Client.Support.Controls
{
    /// <summary>
    /// アプリケーションで使用する日付選択コントロールです。
    /// </summary>
    public partial class FwDateTime : UserControl
    {
        private DateTime? _value;

        /// <summary>
        /// フィールド情報（セパレータ部or数値入力部）
        /// </summary>
        private class FieldInfo
        {
            /// <summary>
            /// フィールドの開始位置
            /// </summary>
            public int index;
            /// <summary>
            /// フィールドの文字数
            /// </summary>
            public int length;
            /// <summary>
            /// フィールドの書式
            /// </summary>
            public string format;

            /// <summary>
            /// コンストラクタ
            /// </summary>
            /// <param name="index"></param>
            /// <param name="length"></param>
            /// <param name="format"></param>
            public FieldInfo(int index, int length, string format)
            {
                this.index = index;
                this.length = length;
                this.format = format;
            }

            /// <summary>
            /// セパレータ部かどうか
            /// </summary>
            /// <returns></returns>
            public bool isSeparator()
            {
                return (string.IsNullOrEmpty(this.format)) ? true : false;
            }

            /// <summary>
            /// 入力値より有効な値を返却する
            /// </summary>
            /// <param name="val"></param>
            /// <param name="minYear"></param>
            /// <param name="maxYear"></param>
            /// <returns></returns>
            public string GetValidValue(string val, int minYear = 1, int maxYear = 9999)
            {
                int intval;

                if (int.TryParse(val, out intval))
                {
                    switch (this.format)
                    {
                        case "yyyy":    // 年（４桁）
                            intval = Math.Min(Math.Max(intval, minYear), maxYear);
                            break;
                        case "M":       // 月（１～１２）
                        case "MM":      // 月（０１～１２）
                            intval = Math.Min(Math.Max(intval, 1), 12);
                            break;
                        case "d":       // 日（１～３１）
                        case "dd":      // 日（０１～３１）
                            intval = Math.Min(Math.Max(intval, 1), 31);
                            break;
                        case "h":       // 時（１～１２）
                        case "hh":      // 時（０１～１２）
                            intval = Math.Min(Math.Max(intval, 0), 12);
                            break;
                        case "H":       // 時（１～２４）
                        case "HH":      // 時（０１～２４）
                            intval = Math.Min(Math.Max(intval, 0), 24);
                            break;
                        case "m":       // 分（０～５９）
                        case "mm":      // 分（００～５９）
                            intval = Math.Min(Math.Max(intval, 0), 59);
                            break;
                        case "s":       // 秒（０～５９）
                        case "ss":      // 秒（００～５９）
                            intval = Math.Min(Math.Max(intval, 0), 59);
                            break;
                    }

                    string fmt = "{0:D" + this.format.Length + "}";
                    return string.Format(fmt, intval);
                }

                return "";
            }
        }

        /// <summary>
        /// フィールド情報リスト
        /// </summary>
        private List<FieldInfo> fieldInfoList = new List<FieldInfo>();

        /// <summary>
        /// カスタム書式指定文字列
        /// </summary>
        [Category("値"), Description("日付/時刻のカスタム書式指定文字列をを取得または設定します。")]
        public string CustomFormat
        {
            get
            {
                return this.dateTimePicker1.CustomFormat;
            }
            set
            {
                this.dateTimePicker1.CustomFormat = value;

                // プレースホルダの設定
                this.placeholder = Regex.Replace(DateTime.Now.ToString(this.CustomFormat), "[0-9]", "_");

                // フィールド情報リストの作成
                this.fieldInfoList.Clear();
                Match m = Regex.Match(this.placeholder, "[_]+|[^_]+");
                while (m.Success)
                {
                    int index = m.Index;
                    int length = m.Length;
                    string format = (m.Value.StartsWith("_")) ? this.CustomFormat.Substring(index, length) : "";
                    FieldInfo finfo = new FieldInfo(m.Index, m.Length, format);

                    this.fieldInfoList.Add(finfo);

                    m = m.NextMatch();
                }
            }
        }

        /// <summary>
        /// 日付の最大値
        /// </summary>
        [Category("値"), Description("入力可能な日付の最大値を取得または設定します。")]
        public DateTime MaxDate { get => this.dateTimePicker1.MaxDate; set => this.dateTimePicker1.MaxDate = value; }

        /// <summary>
        /// 
        /// </summary>
        [Category("値"), Description("入力可能な日付の最小値を取得または設定します。")]
        public DateTime MinDate { get => this.dateTimePicker1.MinDate; set => this.dateTimePicker1.MinDate = value; }

        /// <summary>
        /// 日付/時刻の値
        /// </summary>
        [Category("値"), Description("日付/時刻の値を取得または設定します。")]
        public DateTime? Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;

                // テキスト変更の場合は、DateTimePickerのValueを更新する
                if (this._value.HasValue && !this._value.Equals(this.dateTimePicker1.Value))
                {
                    this.dateTimePicker1.Value = (DateTime)value;
                }

                // テキストのフォーマット
                this.FormatText();
            }
        }

        /// <summary>
        /// 日付文字列
        /// </summary>
        [Browsable(false)]
        public override string Text
        {
            get => (this.fwTextBox1.Text.Equals(this.placeholder)) ? "" : this.fwTextBox1.Text;
            set => this.fwTextBox1.Text = (string.IsNullOrEmpty(value)) ? this.placeholder : value;
        }

        /// <summary>
        /// 背景色
        /// </summary>
        public override Color BackColor { get => this.fwTextBox1.BackColor; set => this.fwTextBox1.BackColor = value; }

        /// <summary>
        /// プレースホルダ
        /// </summary>
        private string placeholder;

        /// <summary>
        /// エラープロバイダー
        /// </summary>
        private ErrorProvider errorprovider = new ErrorProvider();

        /// <summary>
        /// コンストラクタ
        /// </summary>
        public FwDateTime()
        {
            InitializeComponent();
        }

        /// <summary>
        /// テキストのフォーマット
        /// </summary>
        /// <param name="inputText"></param>
        private void FormatText(string inputText = null)
        {
            string text = "";
            int pos = this.fwTextBox1.SelectionStart;

            if (inputText != null)
            {
                // ------------------------
                // テキストボックス編集時
                // ------------------------

                if (!string.IsNullOrEmpty(this.fwTextBox1.PastedText))
                {
                    // ---------------
                    // 貼り付けの場合
                    // ---------------

                    // 入力前のテキスト
                    int start = pos - this.fwTextBox1.PastedText.Length;
                    text = inputText.Substring(0, start) + inputText.Substring(pos);

                    // 削除された文字は、プレースホルダで埋める
                    int cnt = text.Length - this.placeholder.Length;
                    if (cnt < 0)
                    {
                        text = text.Substring(0, start) + this.placeholder.Substring(start, -cnt) + text.Substring(start);
                    }

                    // フィールドの途中から貼り付けた場合、前を"０"で埋める
                    FieldInfo finfo = this.GetFieldInfo(start);
                    if (finfo != null)
                    {
                        for (int i = finfo.index; i < start; i++)
                        {
                            if (text[i] == '_')
                            {
                                text = text.Remove(i, 1).Insert(i, "0");
                            }
                        }
                    }

                    for (int i = start; i < text.Length; i++)
                    {
                        if (this.fwTextBox1.PastedText.Length > 0)
                        {
                            // セパレータでなければ、貼り付け文字に置き換える
                            if (this.placeholder[i] == '_')
                            {
                                text = text.Remove(i, 1).Insert(i, this.fwTextBox1.PastedText[0].ToString());
                                this.fwTextBox1.PastedText = this.fwTextBox1.PastedText.Remove(0, 1);

                                // フィールドの入力が完了した場合、妥当性チェックを行う
                                finfo = this.GetFieldInfo(i);
                                string val = text.Substring(finfo.index, finfo.length);
                                if (!val.Contains("_"))
                                {
                                    string validval = finfo.GetValidValue(val, this.MinDate.Year, this.MaxDate.Year);
                                    if (!val.Equals(validval))
                                    {
                                        // 妥当でなければ、有効な値に置き換える
                                        text = text.Substring(0, finfo.index) + validval + text.Substring(finfo.index + finfo.length);
                                    }
                                }
                            }
                            else
                            {
                                // セパレータの場合、キャレット位置を後ろにずらす
                                pos++;
                            }
                        }
                        else
                        {
                            // 貼り付け完了
                            break;
                        }
                    }

                    // 貼り付け文字が余った場合はクリアする
                    this.fwTextBox1.PastedText = "";
                }
                else
                {
                    // ---------------
                    // キー入力の場合
                    // ---------------

                    int cnt = inputText.Length - this.placeholder.Length;
                    if (cnt > 0)
                    {
                        // 上書きモードにするため、１文字削除
                        text = inputText.Remove(pos, 1);

                        // フィールドの途中から入力した場合、前を"０"で埋める
                        FieldInfo finfo = this.GetFieldInfo(pos - cnt);
                        if (finfo != null)
                        {
                            for (int i = finfo.index; i < pos - cnt; i++)
                            {
                                if (text[i] == '_')
                                {
                                    text = text.Remove(i, 1).Insert(i, "0");
                                }
                            }
                        }

                        // フィールドの入力が完了した場合、妥当性チェックを行う
                        string val = text.Substring(finfo.index, finfo.length);
                        if (!val.Contains("_"))
                        {
                            string validval = finfo.GetValidValue(val, this.MinDate.Year, this.MaxDate.Year);
                            if (!val.Equals(validval))
                            {
                                // 妥当でなければ、有効な値に置き換える
                                text = text.Substring(0, finfo.index) + validval + text.Substring(finfo.index + finfo.length);
                            }
                        }
                    }
                    else if (cnt < 0)
                    {
                        // 削除された文字は、プレースホルダで埋める
                        text = inputText.Substring(0, pos) + this.placeholder.Substring(pos, -cnt) + inputText.Substring(pos);
                    }
                    else
                    {
                        text = inputText;
                    }
                }

                // 全桁入力完了時、日付/時刻の値を更新する
                if (!text.Contains("_"))
                {
                    try
                    {
                        DateTime dt = DateTime.ParseExact(text, this.CustomFormat, null);

                        if (dt < this.MinDate)
                        {
                            dt = this.MinDate;
                            text = this.MinDate.ToString(this.CustomFormat);
                        }
                        if (dt > this.MaxDate)
                        {
                            dt = this.MaxDate;
                            text = this.MaxDate.ToString(this.CustomFormat);
                        }
                        this._value = dt;

                        // DateTimePickerのValueのValueも更新
                        this.dateTimePicker1.Value = dt;
                    }
                    catch
                    {
                        this._value = null;
                    }
                }
                else
                {
                    // 入力途中、および入力クリアの場合は、日付/時刻の値をNULLクリアする
                    this._value = null;
                }
            }
            else
            {
                // ------------------------
                // Valueプロパティ設定時
                // ------------------------

                text = (this._value.HasValue) ? ((DateTime)this._value).ToString(this.CustomFormat) : this.placeholder;
            }

            // 日付文字列の設定
            this.Text = text;

            // キャレットの位置の設定
            this.fwTextBox1.Select(pos, 0);
        }

        /// <summary>
        /// フィールド情報取得
        /// </summary>
        /// <param name="pos"></param>
        /// <returns></returns>
        private FieldInfo GetFieldInfo(int pos)
        {
            foreach (FieldInfo finfo in this.fieldInfoList)
            {
                if (pos >= finfo.index && pos < finfo.index + finfo.length)
                {
                    return finfo;
                }
            }
            return null;
        }

        /// <summary>
        /// 前のフィールド情報取得
        /// </summary>
        /// <param name="finfo"></param>
        /// <returns></returns>
        private FieldInfo GetPrevFieldInfo(FieldInfo finfo)
        {
            int index = this.fieldInfoList.IndexOf(finfo);
            if (index > 0)
            {
                return this.fieldInfoList[index - 1];
            }
            return null;
        }

        /// <summary>
        /// 次のフィールド情報取得
        /// </summary>
        /// <param name="finfo"></param>
        /// <returns></returns>
        private FieldInfo GetNextFieldInfo(FieldInfo finfo)
        {
            int index = this.fieldInfoList.IndexOf(finfo);
            if (index < this.fieldInfoList.Count - 1)
            {
                return this.fieldInfoList[index + 1];
            }
            return null;
        }

        /// <summary>
        /// キー押下（KeyPress）
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void fwTextBox1_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar >= '0' && e.KeyChar <= '9')
            {
                // -------------------
                // 数値入力
                // -------------------

                TextBox textbox = this.fwTextBox1;
                if (textbox.SelectionStart < textbox.Text.Length)
                {
                    FieldInfo finfo = this.GetFieldInfo(textbox.SelectionStart);
                    if (finfo != null)
                    {
                        // 文字挿入位置を調整（セパレータの場合、次フィールドの先頭へ）
                        if (finfo.isSeparator())
                        {
                            FieldInfo next = this.GetNextFieldInfo(finfo);
                            if (next != null)
                            {
                                textbox.SelectionStart = next.index;
                            }
                            else
                            {
                                e.Handled = true;
                            }
                        }
                    }
                }
                else
                {
                    // 末尾での入力は無視する
                    e.Handled = true;
                }
            }
            else if (e.KeyChar == '\b')
            {
                // -------------------
                // バックスペース入力
                // -------------------

                TextBox textbox = this.fwTextBox1;
                if (textbox.SelectionStart > 0)
                {
                    if (textbox.SelectionLength == 0)
                    {
                        FieldInfo finfo = this.GetFieldInfo(textbox.SelectionStart - 1);
                        if (finfo != null)
                        {
                            // 文字挿入位置を調整（セパレータの場合、前フィールドの末尾へ）
                            if (finfo.isSeparator())
                            {
                                FieldInfo prev = this.GetPrevFieldInfo(finfo);
                                if (prev != null)
                                {
                                    textbox.SelectionStart = prev.index + prev.length;
                                }
                                else
                                {
                                    e.Handled = true;
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (textbox.SelectionLength == 0)
                    {
                        // 先頭での入力は無視する
                        e.Handled = true;

                    }
                }
            }
        }

        /// <summary>
        /// テキスト変更（TextChanged）
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void fwTextBox1_TextChanged(object sender, EventArgs e)
        {
            // テキストのフォーマット
            this.FormatText(this.Text);
        }

        /// <summary>
        /// カレンダーで日付選択（ValueChanged）
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dateTimePicker1_ValueChanged(object sender, EventArgs e)
        {
            // 日付/時刻の値を更新
            this._value = this.dateTimePicker1.Value;

            // テキストのフォーマット
            this.FormatText();
        }
    }
}
