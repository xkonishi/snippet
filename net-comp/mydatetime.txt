using System;
using System.ComponentModel;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace MySolutions.PrognerTemplate.Client.Support.Controls
{
    /// <summary>
    /// アプリケーションで使用する日付選択コントロールです。
    /// </summary>
    public partial class FwDateTime : UserControl
    {
        private DateTime? _value;

        /// <summary>
        /// カスタム書式指定文字列
        /// </summary>
        [Category("値"), Description("日付/時刻のカスタム書式指定文字列をを取得または設定します。")]
        public string CustomFormat
        {
            get
            {
                return this.dateTimePicker1.CustomFormat;
            }
            set
            {
                this.dateTimePicker1.CustomFormat = value;

                // プレースホルダの設定
                this.placeholder = Regex.Replace(DateTime.Now.ToString(this.CustomFormat), "[0-9]", "_");
            }
        }

        /// <summary>
        /// 日付の最大値
        /// </summary>
        [Category("値"), Description("入力可能な日付の最大値を取得または設定します。")]
        public DateTime MaxDate { get => this.dateTimePicker1.MaxDate; set => this.dateTimePicker1.MaxDate = value; }

        /// <summary>
        /// 
        /// </summary>
        [Category("値"), Description("入力可能な日付の最小値を取得または設定します。")]
        public DateTime MinDate { get => this.dateTimePicker1.MinDate; set => this.dateTimePicker1.MinDate = value; }

        /// <summary>
        /// 日付/時刻の値
        /// </summary>
        [Category("値"), Description("日付/時刻の値を取得または設定します。")]
        public DateTime? Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;

                // テキスト変更の場合は、DateTimePickerのValueを更新する
                if (this._value.HasValue && !this._value.Equals(this.dateTimePicker1.Value))
                {
                    this.dateTimePicker1.Value = (DateTime)value;
                }

                // テキストのフォーマット
                this.FormatText();
            }
        }

        /// <summary>
        /// 日付文字列
        /// </summary>
        [Browsable(false)]
        public override string Text
        {
            get => (this.fwTextBox1.Text.Equals(this.placeholder)) ? "" : this.fwTextBox1.Text;
            set => this.fwTextBox1.Text = value;
        }
        /// <summary>
        /// プレースホルダ
        /// </summary>
        private string placeholder;

        /// <summary>
        /// エラープロバイダー
        /// </summary>
        private ErrorProvider errorprovider = new ErrorProvider();

        /// <summary>
        /// コンストラクタ
        /// </summary>
        public FwDateTime()
        {
            InitializeComponent();
        }

        /// <summary>
        /// テキストのフォーマット
        /// </summary>
        /// <param name="inputText"></param>
        private void FormatText(string inputText = null)
        {
            string text = "";
            int pos = this.fwTextBox1.SelectionStart;

            if (inputText != null)
            {
                // ------------------------
                // テキストボックス編集時
                // ------------------------

                if (!string.IsNullOrEmpty(this.fwTextBox1.PastedText))
                {
                    // ---------------
                    // 貼り付けの場合
                    // ---------------

                    // 貼り付け文字の前は変更しない
                    text = inputText.Substring(0, pos - this.fwTextBox1.PastedText.Length);

                    // 後ろに貼り付け文字を加える（区切り文字の位置を考慮する）
                    for (int i = text.Length; i < this.placeholder.Length; i++)
                    {
                        if (Regex.IsMatch(this.placeholder[i].ToString(), "[_]"))
                        {
                            if (this.fwTextBox1.PastedText.Length > 0)
                            {
                                text += this.fwTextBox1.PastedText[0];
                                this.fwTextBox1.PastedText = this.fwTextBox1.PastedText.Remove(0, 1);
                            }
                            else
                            {
                                text += this.placeholder[i];
                            }
                        }
                        else
                        {
                            text += this.placeholder[i];

                            // 貼り付け文字がまだ残っている場合はキャレット位置を後ろにずらす
                            if (this.fwTextBox1.PastedText.Length > 0)
                            {
                                pos++;
                            }
                        }
                    }

                    this.fwTextBox1.PastedText = null;
                }
                else
                {
                    // ---------------
                    // キー入力の場合
                    // ---------------

                    int cnt = inputText.Length - this.placeholder.Length;
                    if (cnt > 0)
                    {
                        // 上書きモードにするため、入力された文字数分を削除する
                        text = inputText.Substring(0, pos) + inputText.Substring(pos + cnt);
                    }
                    else if (cnt < 0)
                    {
                        // 削除された文字は、プレースホルダで埋める
                        text = inputText.Substring(0, pos) + this.placeholder.Substring(pos, -cnt) + inputText.Substring(pos);
                    }
                    else
                    {
                        text = inputText;
                    }
                }

                // 有効な日付の場合は、日付/時刻の値を更新する
                try
                {
                    if (!text.Contains("_"))
                    {
                        DateTime dt = DateTime.ParseExact(text, this.CustomFormat, null);

                        if (dt < this.MinDate)
                        {
                            dt = this.MinDate;
                            text = this.MinDate.ToString(this.CustomFormat);
                        }
                        if (dt > this.MaxDate)
                        {
                            dt = this.MaxDate;
                            text = this.MaxDate.ToString(this.CustomFormat);
                        }
                        this.Value = dt;
                    }
                    this.errorprovider.SetError(this, null);
                }
                catch (Exception)
                {
                    this.errorprovider.SetError(this, "有効な日付を入力してください。");
                }
            }
            else
            {
                // ------------------------
                // Valueプロパティ設定時
                // ------------------------

                text = (this.Value.HasValue) ? ((DateTime)this.Value).ToString(this.CustomFormat) : this.placeholder;

                // テキストボックスにフォーカス移動
                this.fwTextBox1.Focus();
            }

            // 日付文字列の設定
            this.Text = text;

            // キャレットの位置の設定
            this.fwTextBox1.Select(pos, 0);
        }

        /// <summary>
        /// キー押下（KeyPress）
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void fwTextBox1_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar >= '0' && e.KeyChar <= '9')
            {
                TextBox textbox = this.fwTextBox1;

                if (textbox.SelectionStart < textbox.Text.Length)
                {
                    // 文字挿入位置を調整（"_"の上以外は入力不可）
                    char c = textbox.Text[textbox.SelectionStart];
                    if (Regex.IsMatch(c.ToString(), "[^_0-9]"))
                    {
                        textbox.SelectionStart = textbox.SelectionStart + 1;
                    }
                }
                else
                {
                    e.Handled = true;
                }
            }
        }

        /// <summary>
        /// テキスト変更（TextChanged）
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void fwTextBox1_TextChanged(object sender, EventArgs e)
        {
            if (this.fwTextBox1.Focused)
            {
                // テキストのフォーマット
                this.FormatText(this.Text);
            }
        }

        /// <summary>
        /// カレンダーで日付選択（ValueChanged）
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dateTimePicker1_ValueChanged(object sender, EventArgs e)
        {
            // 日付/時刻の値を更新
            this.Value = this.dateTimePicker1.Value;
        }
    }
}
